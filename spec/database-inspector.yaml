openapi: 3.0.1
info:
  title: Liara Database Inspector API Documentaion
  description: For managing databases in console
  contact:
    name: liara
    url: https://liara.ir
    email: support@liara.ir
  version: 1.0.0
# externalDocs:
#   description: Find out more about Liara Database Inspector
#   url: --
servers:
  - url: https://{database-inspector-url}
    variables:
      databse-nspector-url:
        default: Example
        description: This value is assigned by the service provider.
security:
  - jwt: []
tags:
  - name: Database Inspector
paths:
  /v1/databases/{databaseID}/roles:
    get:
      tags:
        - Database Inspector
      summary: Get All Roles in Database
      operationId: getAllRoles
      parameters:
        - name: databaseID
          in: path
          description: The ID of the database
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully retrieved all roles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseRolesResponse"
        400:
          description: Bad request (invalid database ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
              example:
                error:
                  statusCode: 400
                  error: "Bad Request"
                  message: "Invalid id"
        401:
          description: Unauthorized (missing or invalid authentication)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401Response"
              example:
                error:
                  error: "Unauthorized."
        404:
          description: Not Found (host unreachable or no roles found)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                hostNotFound:
                  summary: The database host was not found
                  value:
                    error:
                      statusCode: 404
                      error: "Not Found"
                      message: "The database host is unreachable"
                noRolesFound:
                  summary: No roles found in the database
                  value:
                    error:
                      statusCode: 404
                      error: "Not Found"
                      message: "No roles found for the specified database"
        409:
          description: Database-related error (e.g., database or bridge in an invalid state)
          content: {}
        500:
          description: Unexpected server error
          content: {}
    post:
      tags:
        - Database Inspector
      summary: Create Role in database
      operationId: createRole
      parameters:
        - name: databaseID
          in: path
          description: The id of database
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successfully retrieved all roles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseRolesResponse"
        400:
          description: Bad request (invalid database ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400Response"
              example:
                error:
                  statusCode: 400
                  error: "Bad Request"
                  message: "Invalid id"
        401:
          description: Unauthorized (missing or invalid authentication)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401Response"
              example:
                error:
                  error: "Unauthorized."
        404:
          description: Not Found (host unreachable or no roles found)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                hostNotFound:
                  summary: The database host was not found
                  value:
                    error:
                      statusCode: 404
                      error: "Not Found"
                      message: "The database host is unreachable"
                noRolesFound:
                  summary: No roles found in the database
                  value:
                    error:
                      statusCode: 404
                      error: "Not Found"
                      message: "No roles found for the specified database"
        430:
          description: Validation error
          content: {}
        409:
          description: Database-related error (e.g., database or bridge in an invalid state)
          content: {}
        500:
          description: Unexpected server error
          content: {}
  /v1/databases/{databaseID}/datasets:
    get:
      tags:
        - Database Inspector
      summary: get all datasets in database (for example tables in SQL databases)
      operationId: getAllDatasets
      parameters:
        - name: databaseID
          in: path
          description: The id of database
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                # $ref: "#/components/schemas/search"
        400:
          description: Bad request
          content: {}
        401:
          description: Missing authentication
          content: {}
        404:
          description: App does not exists.
          content: {}
        500:
          description: Unexpected error
          content: {}
  /v1/databases/{databaseID}/datasets/{datasetName}:
    get:
      tags:
        - Database Inspector
      summary: get dataset in database using its name
      operationId: getDatasetByName
      parameters:
        - name: databaseID
          in: path
          description: The id of databse
          required: true
          schema:
            type: string
        - name: datasetName
          in: path
          description: The name of dataset (for example table in sql databases)
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Missing authentication
          content: {}
        404:
          description: App does not exists.
          content: {}
        500:
          description: Unexpected error
          content: {}
  /v1/databases/{databaseID}/queries:
    post:
      tags:
        - Database Inspector
      summary: Execute custom query
      operationId: queries
      parameters:
        - name: databaseID
          in: path
          description: The id of database
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Missing authentication
          content: {}
        404:
          description: App does not exists.
          content: {}
        500:
          description: Unexpected error
          content: {}
  /v1/databases/{databaseID}/datasets/{datasetName}/filter:
    post:
      tags:
        - Database Inspector
      summary: Filter dataset data
      operationId: filterDataset
      parameters:
        - name: databaseID
          in: path
          description: The id of database
          required: true
          schema:
            type: string
        - name: datasetName
          in: path
          description: The name of dataset
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Missing authentication
          content: {}
        404:
          description: App does not exists.
          content: {}
        500:
          description: Unexpected error
          content: {}
  /v1/databases/{databaseID}/datasets/{datasetName}/data:
    post:
      tags:
        - Database Inspector
      summary: Create data in dataset
      operationId: createData
      parameters:
        - name: databaseID
          in: path
          description: The id of database
          required: true
          schema:
            type: string
        - name: datasetName
          in: path
          description: The name of dataset
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Missing authentication
          content: {}
        404:
          description: App does not exists.
          content: {}
        500:
          description: Unexpected error
          content: {}
    delete:
      tags:
        - Database Inspector
      summary: Delete data in dataset
      operationId: deleteData
      parameters:
        - name: databaseID
          in: path
          description: The id of database
          required: true
          schema:
            type: string
        - name: datasetName
          in: path
          description: The name of dataset
          required: true
          schema:
            type: string
      responses:
        202:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Missing authentication
          content: {}
        404:
          description: App does not exists.
          content: {}
        500:
          description: Unexpected error
          content: {}
  /v1/databases/{databaseID}/roles/{roleName}:
    put:
      tags:
        - Database Inspector
      summary: Update Role
      operationId: updateRole
      parameters:
        - name: databaseID
          in: path
          description: The id of database
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          description: The name of role
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Missing authentication
          content: {}
        404:
          description: App does not exists.
          content: {}
        500:
          description: Unexpected error
          content: {}
    delete:
      tags:
        - Database Inspector
      summary: Delete Role
      operationId: deleteRole
      parameters:
        - name: databaseID
          in: path
          description: The id of database
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          description: The name of role
          required: true
          schema:
            type: string
      responses:
        201:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Missing authentication
          content: {}
        404:
          description: App does not exists.
          content: {}
        500:
          description: Unexpected error
          content: {}
components:
  schemas:
    DatabaseRolesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/DatabaseRole"

    DatabaseRole:
      type: object
      properties:
        rolename:
          type: string
          example: "root"
        is_superuser:
          type: boolean
          example: true
        can_inherit_roles:
          type: boolean
          example: true
        can_create_roles:
          type: boolean
          example: true
        can_create_databases:
          type: boolean
          example: true
        can_login:
          type: boolean
          example: true
        can_replicate:
          type: boolean
          example: true
        connection_limit:
          type: integer
          example: -1
        valid_until:
          type: string
          nullable: true
          example: null
        member_of:
          type: string
          example: "{}"
        inherited_roles:
          type: string
          example: "{}"

    Error400Response:
      type: object
      properties:
        error:
          type: object
          properties:
            statusCode:
              type: integer
              example: 400
            error:
              type: string
              example: "Bad Request"
            message:
              type: string
              example: "Invalid id"

    Error401Response:
      type: object
      properties:
        error:
          type: object
          properties:
            error:
              type: string
              example: "Unauthorized."

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            statusCode:
              type: integer
              example: 404
            error:
              type: string
              example: "Not Found"
            message:
              type: string
              example: "The database host is unreachable"
  securitySchemes:
    jwt:
      type: apiKey
      description: 'Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".  #'
      name: Authorization
      in: header
